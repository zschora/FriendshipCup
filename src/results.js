const schedule = JSON.parse(localStorage.getItem('schedule')) || [];const players = JSON.parse(localStorage.getItem('players')) || [];const results = JSON.parse(localStorage.getItem('results')) || [];const QUESTIONS_PER_TOUR = parseInt(localStorage.getItem('questionsPerRound')) || 3;const TOTAL_TOURS = parseInt(localStorage.getItem('roundCount')) || schedule.length;const btnTeams = document.getElementById('btnTeams');const btnPlayers = document.getElementById('btnPlayers');const container = document.getElementById('resultsTableContainer');btnTeams.addEventListener('click', () => {  btnTeams.classList.add('active');  btnPlayers.classList.remove('active');  renderTeamsTable();});btnPlayers.addEventListener('click', () => {  btnPlayers.classList.add('active');  btnTeams.classList.remove('active');  renderPlayersTable();});renderTeamsTable();function renderTeamsTable() {  if (!schedule.length || !results.length) {    container.innerHTML = '<p>Нет данных для отображения результатов.</p>';    return;  }  const teamCount = schedule[0].length;  // Создаем структуру для подсчёта очков по командам  let teamScores = Array.from({ length: teamCount }, () =>    Array.from({ length: TOTAL_TOURS }, () => Array(QUESTIONS_PER_TOUR).fill(0))  );  results.forEach((tourResults, tourIdx) => {    tourResults.forEach((teamsForQuestion, questionIdx) => {      teamsForQuestion.forEach(teamNum => {        const idx = teamNum - 1;        if (teamScores[idx] && teamScores[idx][tourIdx]) {          teamScores[idx][tourIdx][questionIdx] = 1;        }      });    });  });  let teamTotals = teamScores.map(team => team.flat().reduce((a,b) => a + b, 0));  // Формируем таблицу  let html = '<table><thead>';  // Первая строка — Туры, занимаем colspan по числу вопросов  html += '<tr><th>Команда</th>';  for (let t = 0; t < TOTAL_TOURS; t++) {    html += `<th colspan="${QUESTIONS_PER_TOUR}">Тур ${t + 1}</th>`;  }  html += '<th rowspan="2">Итого</th></tr>';  // Вторая строка — номера вопросов  html += '<tr><th></th>';  for (let t = 0; t < TOTAL_TOURS; t++) {    for (let q = 0; q < QUESTIONS_PER_TOUR; q++) {      html += `<th>${q + 1}</th>`;    }  }  html += '</tr></thead><tbody>';  for (let i = 0; i < teamCount; i++) {    html += `<tr><td>Команда ${i + 1}</td>`;    for (let t = 0; t < TOTAL_TOURS; t++) {      for (let q = 0; q < QUESTIONS_PER_TOUR; q++) {        html += `<td>${teamScores[i][t][q]}</td>`;      }    }    html += `<td><strong>${teamTotals[i]}</strong></td></tr>`;  }  html += '</tbody></table>';  container.innerHTML = html;  const sparksContainer = document.querySelector('.sparks');for(let i = 0; i < 5; i++) {  const spark = document.createElement('span');  sparksContainer.appendChild(spark);}}function renderPlayersTable() {  if (!schedule.length || !results.length || !players.length) {    container.innerHTML = '<p>Нет данных для отображения результатов.</p>';    return;  }  const playerCount = players.length;  // Структура: очки игроков по вопросам  let playerScores = Array.from({ length: playerCount }, () =>    Array.from({ length: TOTAL_TOURS }, () => Array(QUESTIONS_PER_TOUR).fill(0))  );  // Заполняем очки  results.forEach((tourResults, tIdx) => {    tourResults.forEach((teamsForQ, qIdx) => {      teamsForQ.forEach(teamNum => {        const teamPlayers = schedule[tIdx][teamNum - 1];        if (teamPlayers) {          teamPlayers.forEach(playerName => {            const pIdx = players.indexOf(playerName);            if (pIdx !== -1) {              playerScores[pIdx][tIdx][qIdx] = 1;            }          });        }      });    });  });  let playerTotals = playerScores.map(player =>    player.flat().reduce((a, b) => a + b, 0)  );  // Формируем массив для сортировки  let playerData = players.map((name, idx) => ({    name,    scores: playerScores[idx],    total: playerTotals[idx]  }));  // Сортируем по убыванию очков  playerData.sort((a, b) => b.total - a.total);  // Таблица  let html = '<table><thead>';  // Первая строка — туры  html += '<tr><th>Игрок</th>';  for (let t = 0; t < TOTAL_TOURS; t++) {    html += `<th colspan="${QUESTIONS_PER_TOUR}">Тур ${t + 1}</th>`;  }  html += '<th rowspan="2">Итого</th></tr>';  // Вторая строка — вопросы  html += '<tr><th></th>';  for (let t = 0; t < TOTAL_TOURS; t++) {    for (let q = 0; q < QUESTIONS_PER_TOUR; q++) {      html += `<th>${q + 1}</th>`;    }  }  html += '</tr></thead><tbody>';  // Строки игроков (уже отсортированные)  playerData.forEach(p => {    html += `<tr><td>${p.name}</td>`;    for (let t = 0; t < TOTAL_TOURS; t++) {      for (let q = 0; q < QUESTIONS_PER_TOUR; q++) {        html += `<td>${p.scores[t][q]}</td>`;      }    }    html += `<td><strong>${p.total}</strong></td></tr>`;  });  html += '</tbody></table>';  container.innerHTML = html;}