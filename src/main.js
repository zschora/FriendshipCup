let players = [];function startGameData() {  const raw = document.getElementById('playerList').value;  const lines = raw.split('\n').map(name => name.trim()).filter(name => name !== '');  if (lines.length < 2) {    alert('Введите хотя бы двух игроков.');    return null;  }  return lines;}function generateTeams() {  players = startGameData();  if (!players) return;  const M = parseInt(document.getElementById('roundCount').value);  const T = parseInt(document.getElementById('questionsPerRound').value);  if (isNaN(M) || isNaN(T) || M < 1 || T < 1) {    alert('Введите корректные значения M и T.');    return;  }  const playedTogether = {};  players.forEach(p => playedTogether[p] = {});  const schedule = [];  for (let round = 0; round < M; round++) {    schedule.push(generateTeamRound(players, playedTogether));  }  // Сохраняем в localStorage  localStorage.setItem('players', JSON.stringify(players));  localStorage.setItem('schedule', JSON.stringify(schedule));  localStorage.setItem('questionsPerRound', T);  localStorage.setItem('roundCount', M);  // Переходим на страницу игры  window.location.href = 'src/game.html';}function generateTeamRound(players, playedTogether) {  const shuffled = [...players];  const teams = [];  let N = players.length;  let team6cnt = Math.floor(N / 6) - (5 - N % 6) % 5;  for (let i = shuffled.length - 1; i > 0; i--) {    const j = Math.floor(Math.random() * (i + 1));    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];  }  while (shuffled.length > 0) {    let teamSize = (teams.length >= team6cnt) ? 5 : 6;    let bestTeam = null;    let bestScore = Infinity;    for (let attempt = 0; attempt < 10; attempt++) {      const candidate = shuffled.slice(0, Math.min(teamSize, shuffled.length));      let score = 0;      for (let i = 0; i < candidate.length; i++) {        for (let j = i + 1; j < candidate.length; j++) {          score += (playedTogether[candidate[i]][candidate[j]] || 0);        }      }      if (score < bestScore) {        bestScore = score;        bestTeam = candidate;      }      shuffled.push(shuffled.shift());    }    bestTeam.forEach(p1 => {      shuffled.splice(shuffled.indexOf(p1), 1);      bestTeam.forEach(p2 => {        if (p1 !== p2) {          playedTogether[p1][p2] = (playedTogether[p1][p2] || 0) + 1;        }      });    });    teams.push(bestTeam);  }  return teams;}function resetGame() {  players = [];  document.getElementById('playerList').value = '';  document.getElementById('roundCount').value = '';  document.getElementById('questionsPerRound').value = '';  document.getElementById('scheduleDisplay').innerHTML = '';}