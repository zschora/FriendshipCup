let schedule = JSON.parse(localStorage.getItem('schedule')) || [];let players = JSON.parse(localStorage.getItem('players')) || [];let currentTour = 0;let currentQuestion = 0;let results = [];let teamScores = [];let QUESTIONS_PER_TOUR = parseInt(localStorage.getItem('questionsPerRound')) || 3;let TOTAL_TOURS = parseInt(localStorage.getItem('roundCount')) || schedule.length;let isEditingResults = false;document.addEventListener('DOMContentLoaded', () => {  if (!schedule.length) {    document.getElementById('teamsList').innerHTML = "<p>Нет данных о командах. Сначала сгенерируйте расписание.</p>";    return;  }  results = Array(schedule.length).fill(null).map(() => []);  teamScores = new Array(schedule[0].length).fill(0);  renderQuestion();  updateCurrentResults();  document.getElementById('nextQuestionBtn').addEventListener('click', saveAndNextQuestion);  document.getElementById('nextTourBtn').addEventListener('click', startNextTour);  document.getElementById('downloadTeamsBtn').addEventListener('click', downloadTeams);});function renderQuestion() {  const teams = schedule[currentTour];  document.getElementById('tourNumber').textContent = currentTour + 1;  document.getElementById('questionNumber').textContent = currentQuestion + 1;  const list = document.getElementById('teamsList');  list.innerHTML = '';  teams.forEach((team, idx) => {    const div = document.createElement('div');    div.className = 'team';    div.innerHTML = `      <input type="checkbox" id="team${idx}" class="team-checkbox">      <label for="team${idx}">Команда ${idx + 1}</label>    `;    list.appendChild(div);  });}function saveAndNextQuestion() {  const checked = [];  schedule[currentTour].forEach((_, idx) => {    if (document.getElementById(`team${idx}`).checked) {      checked.push(idx + 1);      teamScores[idx] += 1;    }  });  results[currentTour].push(checked);  updateCurrentResults();  currentQuestion++;  if (currentQuestion >= QUESTIONS_PER_TOUR) {    disableCheckboxes();    document.getElementById('nextQuestionBtn').style.display = 'none';    if (currentTour < schedule.length - 1) {      document.getElementById('nextTourBtn').style.display = 'inline-block';    } else {      document.getElementById('teamsList').innerHTML = '<p>Все туры завершены.</p>';      document.getElementById('showResultsBtn').style.display = 'inline-block';      document.getElementById('showResultsBtn').addEventListener('click', () => {          window.location.href = 'results.html'; // Переход на страницу с результатами        });    }  } else {    renderQuestion();  }}function startNextTour() {  enableCheckboxes();  currentTour++;  currentQuestion = 0;  if (currentTour >= schedule.length) {    document.getElementById('teamsList').innerHTML = '<p>Все туры завершены.</p>';    document.getElementById('nextTourBtn').style.display = 'none';    document.getElementById('showResultsBtn').style.display = 'inline-block';  } else {    document.getElementById('nextTourBtn').style.display = 'none';    document.getElementById('nextQuestionBtn').style.display = 'inline-block';    renderQuestion();  }}function updateCurrentResults() {  localStorage.setItem('results', JSON.stringify(results));  if (!schedule.length) {    document.getElementById('currentResults').innerHTML = '<p>Нет данных для отображения результатов.</p>';    return;  }  let teamCount = schedule[0].length;  let tourCount = schedule.length;  let questionCount = QUESTIONS_PER_TOUR;  // Считаем очки по каждой команде, туру и вопросу  // teamScores[team][tour][question] = 0 или 1  let teamScores = Array.from({ length: teamCount }, () =>    Array.from({ length: tourCount }, () => Array(questionCount).fill(0))  );  results.forEach((tourResults, tIdx) => {    tourResults.forEach((teamsForQuestion, qIdx) => {      teamsForQuestion.forEach(teamNum => {        const teamIdx = teamNum - 1;        if (teamScores[teamIdx] && teamScores[teamIdx][tIdx]) {          teamScores[teamIdx][tIdx][qIdx] = 1;        }      });    });  });  // Итоги по каждой команде  let teamTotals = teamScores.map(team =>    team.flat().reduce((a, b) => a + b, 0)  );  // Формируем таблицу  let html = '<table border="1" style="border-collapse: collapse; text-align: center;">';  // Первая строка: заголовок туров с colspan = QUESTIONS_PER_TOUR  html += '<thead><tr><th rowspan="2">Команда</th>';  for (let t = 0; t < tourCount; t++) {    html += `<th colspan="${questionCount}">Тур ${t + 1}</th>`;  }  //html += '<th rowspan="2">Итого</th></tr>';  // Вторая строка: номера вопросов по турам  html += '<tr>';  for (let t = 0; t < tourCount; t++) {    for (let q = 0; q < questionCount; q++) {      html += `<th>${q + 1}</th>`;    }  }  html += '</tr></thead><tbody>';  // Строки с командами и их очками по вопросам  for (let i = 0; i < teamCount; i++) {    html += `<tr><td>К${i + 1}</td>`;    for (let t = 0; t < tourCount; t++) {      for (let q = 0; q < questionCount; q++) {        const value = teamScores[i][t][q];        if (isEditingResults) {          // чекбокс для редактирования          html += `<td>            <input type="checkbox" data-team="${i}" data-tour="${t}" data-question="${q}" ${value ? 'checked' : ''}>          </td>`;        } else {          // просто число          html += `<td>${value}</td>`;        }      }    }  }  html += '</tbody></table>';  document.getElementById('currentResults').innerHTML = html;}function disableCheckboxes() {  document.querySelectorAll('#teamsList .team').forEach(team => {    team.classList.add('disabled');    const checkbox = team.querySelector('input[type="checkbox"]');    checkbox.classList.add('hidden-checkbox');    checkbox.disabled = true;  });}function enableCheckboxes() {  document.querySelectorAll('#teamsList .team').forEach(team => {    team.classList.remove('disabled');    const checkbox = team.querySelector('input[type="checkbox"]');    checkbox.classList.remove('hidden-checkbox');    checkbox.disabled = false;  });}function downloadTeams() {  if (!schedule.length) {    alert('Нет данных для скачивания.');    return;  }  let text = '';  schedule.forEach((round, i) => {    text += `Тур ${i + 1}:\n`;    round.forEach((team, j) => {      text += `  Команда ${j + 1}: ${team.join(', ')}\n`;    });    text += '\n';  });  const blob = new Blob([text], { type: 'text/plain' });  const link = document.createElement('a');  link.href = URL.createObjectURL(blob);  link.download = 'teams.txt';  link.click();}function downloadPlayerMiniTables() {  if (!players.length || !schedule.length) {    alert('Нет данных для формирования мини-таблиц.');    return;  }  const toursCount = schedule.length;  const playerTeams = {};  players.forEach(p => playerTeams[p] = Array(toursCount).fill(''));  schedule.forEach((round, tourIndex) => {    round.forEach((team, teamIndex) => {      team.forEach(player => {        if (playerTeams[player]) {          playerTeams[player][tourIndex] = `К${teamIndex + 1}`;        }      });    });  });  let text = '';  for (const player of players) {    text += `Игрок: ${player}\n`;    text += 'Тур ' + Array.from({length: toursCount}, (_, i) => i + 1).join(' | Тур ') + '\n';    text += playerTeams[player].map(team => team.padEnd(4)).join('  | ') + '\n\n';  }  downloadTextFile(text, 'лист_игроков_мини_таблицы.txt');}function downloadTextFile(text, filename) {  const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });  const url = URL.createObjectURL(blob);  const a = document.createElement('a');  a.href = url;  a.download = filename;  a.click();  URL.revokeObjectURL(url);}